service cloud.firestore {
  match /databases/{database}/documents {
    function hasClaim(claim) { // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() { // requester uid matches field in existing doc
      return request.auth.uid == resource.data.uid;
    }
    function isInCollection(field, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(request.resource.data[field]))
    }
    function newDoc() {
      return request.resource.data;
    }
    function numOrMissing(field) {
      return ( newDoc()[field] is number || !(field in newDoc()))
    }
    function validTimeEntry() {
      return
        // restrict accepted properties
        newDoc().keys().hasOnly([
            "date", "project", "division", "timetype", "workrecord", "notes",
            "hours", "jobHours", "mealsHours", "uid"
          ]) &&

        isInCollection("timetype","TimeTypes") && // timetype exists in db
 
        // When project provided, it & division exist in db, timetype is 'R'
        (
          ( isInCollection("project","Projects") && 
            isInCollection("division","Divisions") &&
            newDoc().timetype == "R" ) || 
          !("project" in newDoc())
        ) &&

        // When provided, Division exists in the database and Time Type is 'R'
        (
          ( isInCollection("division","Divisions") && 
            newDoc().timetype == "R" ) || 
          !("division" in newDoc())
        ) &&

        // when provided, hours/jobHours/mealsHours are numbers
        ( newDoc().jobHours is number || !("jobHours" in newDoc()) ) &&
        ( newDoc().hours is number || !("hours" in newDoc()) ) &&
        ( newDoc().mealsHours is number || !("mealsHours" in newDoc()) );
    }
    match /RawLogins/{rawLogin} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.rawlogins == true;
    }
    match /Logins/{login} {
      allow read: if request.auth.uid != null;
    }
    match /Profiles/{profile} {
      allow read: if request.auth.uid != null;
    }
    match /Users/{user} {
      allow read: if request.auth.uid != null;
    }
    match /Computers/{computer} {
      allow read: if request.auth.uid != null;
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches() 
      allow create: if hasClaim("time") && validTimeEntry()
    }
    match /TimeSheets/{sheet} {
      allow read, update, delete: if request.auth.uid == resource.data.uid && request.auth.token.time == true;
      allow create: if request.auth.token.time == true;
    }
    match /Projects/{project} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.projects == true;
    }
    match /Divisions/{division} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.admin == true;
    }
    match /TimeTypes/{timetype} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.admin == true;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}