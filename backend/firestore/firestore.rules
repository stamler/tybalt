service cloud.firestore {
  match /databases/{database}/documents {
    function hasClaim(claim) {
      // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() {
      // requester uid matches uid field in existing document
      return request.auth.uid == resource.data.uid;
    }
    match /RawLogins/{rawLogin} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.rawlogins == true;
    }
    match /Logins/{login} {
      allow read: if request.auth.uid != null;
    }
    match /Profiles/{profile} {
      allow read: if request.auth.uid != null;
    }
    match /Users/{user} {
      allow read: if request.auth.uid != null;
    }
    match /Computers/{computer} {
      allow read: if request.auth.uid != null;
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && uidMatches() && exists(/databases/$(database)/documents/Projects/$(request.resource.data.job));
      allow create: if hasClaim("time") && exists(/databases/$(database)/documents/Projects/$(request.resource.data.job));
    }
    match /TimeSheets/{sheet} {
      allow read, update, delete: if request.auth.uid == resource.data.uid && request.auth.token.time == true;
      allow create: if request.auth.token.time == true;
    }
    match /Projects/{project} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.projects == true;
    }
    match /Divisions/{division} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.admin == true;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}