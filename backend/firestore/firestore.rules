rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth.uid != null;
    }
    function hasClaim(claim) { // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() { // requester uid matches field in existing doc
      return request.auth.uid == resource.data.uid;
    }
    function managerUidMatches() {
      return request.auth.uid == resource.data.managerUid;
    }
    function isInCollection(field, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(request.resource.data[field]))
    }
    function isMissing(field) {
      return !(field in newDoc())
    }
    function newDoc() {
      return request.resource.data;
    }
    function isPositiveNumber(field) {
      return request.resource.data[field] is number && request.resource.data[field] > 0;
    }
    function hasValidWorkrecord() {
      return "workrecord" in newDoc() && newDoc().workrecord.matches('[FKQ][0-9]{2}-[0-9]{3,}(-[0-9]+)?');
    }
    function validTimeEntry() {
      // TODO: Boolean Simplification
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "job",
          "hours", "jobHours", "workrecord", "notes", "mealsHours", "uid",
          "timetypeName", "divisionName", "jobName", "weekEnding" ]) &&

        // timetype exists in db
        isInCollection("timetype","TimeTypes") &&

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "uid"]) &&

        // prevent user from submitting an entry with an unauthorized uid
        request.auth.uid == request.resource.data['uid'] &&

        // when job provided, job & division exist in db, timetype is 'R'
        (
          ( isInCollection("job","Jobs") && 
            isInCollection("division","Divisions") &&
            newDoc().timetype == "R" ) || 
          isMissing("job")
        ) &&

        // when provided, division exists in db, Time Type is 'R'
        // when division is missing, Time Type is not 'R'
        (
          ( isInCollection("division","Divisions") && 
            newDoc().timetype == "R" ) ||
          (isMissing("division") && 
            newDoc().timetype != "R" )
        ) &&

        // at least one hours type is provided OR the timetype is "OR"
        (
          (isPositiveNumber("jobHours") && !(newDoc().timetype == "OR")) ||
          (isPositiveNumber("hours") && !(newDoc().timetype == "OR")) ||
          (isPositiveNumber("mealsHours") && !(newDoc().timetype == "OR")) ||
          (newDoc().timetype == "OR" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding"]))
        ) &&

        // when provided, jobHours require an existing job
        (
          ( isPositiveNumber("jobHours") && isInCollection("job", "Jobs") ) ||
          isMissing("jobHours") 
        ) &&

        // when provided workrecord requires an existing job
        (
          ( hasValidWorkrecord() && isInCollection("job", "Jobs") ) ||
          isMissing("workrecord")
        );
    }
    match /Computers/{computer} {
      allow read: if isSignedIn();
    }
    match /Divisions/{division} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Logins/{login} {
      allow read: if hasClaim("admin");
    }
    match /Profiles/{profile} {
      allow read: if hasClaim("admin");
      allow update: if hasClaim("admin") && 
        newDoc().keys().hasOnly([
          "managerUid", "managerName","displayName","email","customClaims"
        ]) &&
        newDoc().keys().hasAll(["displayName", "email"]) &&
        isInCollection("managerUid","Profiles")
    }
    match /Jobs/{jobId} {
      allow read: if isSignedIn();
      allow create, update: if hasClaim("job") && 
        ( isMissing("proposal") || isInCollection("proposal","Jobs")) && 
        jobId.matches('(P)?[0-9]{2}-[0-9]{3,}(-[0-9]+)?') &&
        newDoc().name.size() > 5;
    }
    match /RawLogins/{rawLogin} {
      allow read, delete: if hasClaim("admin");
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches();
      allow create: if hasClaim("time") && validTimeEntry();
    }
    match /TimeExports/{entry} {
      allow read: if hasClaim("tadm") || hasClaim("admin");
    }
    match /TimeSheets/{sheet} {
      allow read: if (
        hasClaim("time") && uidMatches() || 
        hasClaim("tapr") && managerUidMatches() && resource.data.submitted == true ||
        hasClaim("tadm") ||
        hasClaim("admin")
      );
      // Allow submission by directly editing the 'submitted' field
      // Prevent settings 'submitted' to false if already 'approved'
      allow update: if (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == true &&
        resource.data.rejected == false
      ) || (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == false &&
        resource.data.approved == false
      ) || (
        hasClaim("tapr") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["approved"]) &&
        request.resource.data.approved == true &&
        resource.data.rejected == false
      ) || (
        hasClaim("tapr") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["approved", "rejected", "rejectionReason"]) &&
        request.resource.data.rejected == true &&
        request.resource.data.approved == false &&
        request.resource.data.rejectionReason.size() > 5
      );
    }
    match /TimeTypes/{timetype} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Users/{user} {
      allow read: if hasClaim("admin");
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}