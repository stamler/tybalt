rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth.uid != null;
    }
    function hasClaim(claim) { // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() { // requester uid matches field in existing doc
      return request.auth.uid == resource.data.uid;
    }
    function isInCollection(field, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(request.resource.data[field]))
    }
    function newDoc() {
      return request.resource.data;
    }
    function isPositiveNumber(field) {
      return request.resource.data[field] is number && request.resource.data[field] > 0;
    }
    function validTimeEntry() {
      // TODO: Boolean Simplification
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "project",
          "hours", "jobHours", "workrecord", "notes", "mealsHours", "uid",
          "timetypeName", "divisionName", "projectName", "week_ending" ]) &&

        isInCollection("timetype","TimeTypes") && // timetype exists in db

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "uid"]) &&

        // prevent user from submitting an entry with an unauthorized uid
        request.auth.uid == request.resource.data['uid'] &&

        // when project provided, it & division exist in db, timetype is 'R'
        (
          ( isInCollection("project","Projects") && 
            isInCollection("division","Divisions") &&
            newDoc().timetype == "R" ) || 
          !("project" in newDoc())
        ) &&

        // when provided, division exists in db, Time Type is 'R'
        // when division is missing, Time Type is not 'R'
        (
          ( isInCollection("division","Divisions") && 
            newDoc().timetype == "R" ) ||
          (!("division" in newDoc()) && 
            newDoc().timetype != "R" )
        ) &&

        // at least one hours type is provided OR the timetype is "OR"
        (
          (isPositiveNumber("jobHours") && !(newDoc().timetype == "OR")) ||
          (isPositiveNumber("hours") && !(newDoc().timetype == "OR")) ||
          (isPositiveNumber("mealsHours") && !(newDoc().timetype == "OR")) ||
          (newDoc().timetype == "OR" && newDoc().keys().hasOnly(["date", "timetype", "uid", "week_ending"]))
        ) &&

        // when provided, jobHours require an existing project
        (
          ( newDoc()["jobHours"] is number && isInCollection("project", "Projects") ) ||
          !("jobHours" in newDoc()) 
        ) &&

        // when provided workrecord requires an existing project
        (
          ("workrecord" in newDoc() && isInCollection("project", "Projects") ) ||
          !("workrecord" in newDoc())
        );
    }
    match /Computers/{computer} {
      allow read: if isSignedIn();
    }
    match /Divisions/{division} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Logins/{login} {
      allow read: if hasClaim("admin");
    }
    match /Profiles/{profile} {
      allow read: if hasClaim("admin");
    }
    match /Projects/{project} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /RawLogins/{rawLogin} {
      allow read, delete: if hasClaim("admin");
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches();
      allow create: if hasClaim("time") && validTimeEntry();
    }
    match /TimeSheets/{sheet} {
      allow read: if hasClaim("time") && uidMatches();
    }
    match /TimeTypes/{timetype} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Users/{user} {
      allow read: if hasClaim("admin");
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}