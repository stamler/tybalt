rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth.uid != null;
    }
    function hasClaim(claim) { // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() { // requester uid matches field in existing doc
      return request.auth.uid == resource.data.uid;
    }
    function managerUidMatches() {
      return request.auth.uid == resource.data.managerUid;
    }
    function isInCollection(field, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(request.resource.data[field]))
    }
    function isMissing(field) {
      return !(field in newDoc())
    }
    function newDoc() {
      return request.resource.data;
    }
    function isPositiveNumberUnderEighteen(field) {
      return request.resource.data[field] is number && request.resource.data[field] > 0 && request.resource.data[field] <= 18;
    }
    function hasValidWorkrecord() {
      return "workrecord" in newDoc() && newDoc().workrecord.matches('[FKQ][0-9]{2}-[0-9]{3,}(-[0-9]+)?');
    }
    function validAmendmentEntry() {
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "job", "payoutRequestAmount",
          "hours", "jobHours", "workrecord", "workDescription", "mealsHours", "uid",
          "timetypeName", "divisionName", "jobDescription", "client", "weekEnding",
          "creator", "creatorName", "displayName", "created", "committed", "surname", "givenName" ]) &&
        
        // timetype exists in db
        isInCollection("timetype","TimeTypes") &&

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "timetypeName", "uid",
        "creator", "creatorName", "displayName", "created", "surname", "givenName" ]) &&

        // when job provided, job & division exist in db,
        // jobDescription and client are present, timetype is 'R'
        (
          ( isInCollection("job","Jobs") && 
            isInCollection("division","Divisions") &&
            newDoc().keys().hasAll(["jobDescription", "client"]) &&
            newDoc().timetype == "R" ) || 
          isMissing("job")
        ) &&

        // when provided, division exists in db, Time Type is 'R'
        // when division is missing, Time Type is not 'R'
        (
          ( isInCollection("division","Divisions") && 
            newDoc().timetype == "R" ) ||
          (isMissing("division") && 
            newDoc().timetype != "R" )
        ) &&

        // at least one hours type is provided AND the timetype is NOT "OR", "OTO", or "RB"
        (
          newDoc().timetype != "OR" &&
          newDoc().timetype != "OTO" &&
          newDoc().timetype != "RB" &&
          !(newDoc().keys().hasAll(["payoutRequestAmount"])) && // payoutRequestAmount is not defined
          (
            newDoc().jobHours is number ||
            newDoc().hours is number ||
            newDoc().mealsHours is number 
          )
        ) &&

        // when provided, jobHours require an existing job
        (
          (newDoc().jobHours is number && isInCollection("job", "Jobs") ) ||
          isMissing("jobHours") 
        ) &&

        // when provided workrecord requires an existing job
        (
          ( hasValidWorkrecord() && isInCollection("job", "Jobs") ) ||
          isMissing("workrecord")
        );
    }
    function validExpenseEntry() {
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "description", "uid", "displayName", 
          "surname", "givenName", "total", "submitted", "approved",
          "managerUid", "managerName",
          "job", "jobDescription", "client", "po", "weekEnding", "attachment",
          "rejected", "rejectionReason", "committed" ]) &&
        
        // required fields
        newDoc().keys().hasAll(["date", "description", "uid", "displayName",
          "surname", "givenName", "total", "submitted", "approved",
          "managerUid", "managerName"]) &&

        // when job provided, job exists in db,
        // jobDescription and client are present
        (
          ( isInCollection("job","Jobs") && 
            newDoc().keys().hasAll(["jobDescription", "client"])
          ) || 
          isMissing("job")
        )
    }
    function validTimeEntry() {
      // TODO: Boolean Simplification
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "job", "payoutRequestAmount",
          "hours", "jobHours", "workrecord", "workDescription", "mealsHours", "uid",
          "timetypeName", "divisionName", "jobDescription", "client", "weekEnding" ]) &&

        // timetype exists in db
        isInCollection("timetype","TimeTypes") &&

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "timetypeName", "uid"]) &&

        // prevent user from submitting an entry with an unauthorized uid
        request.auth.uid == request.resource.data['uid'] &&

        // when job provided, job & division exist in db,
        // jobDescription and client are present, timetype is 'R'
        (
          ( isInCollection("job","Jobs") && 
            isInCollection("division","Divisions") &&
            newDoc().keys().hasAll(["jobDescription", "client"]) &&
            newDoc().timetype == "R" ) || 
          isMissing("job")
        ) &&

        // when provided, division exists in db, Time Type is 'R'
        // when division is missing, Time Type is not 'R'
        (
          ( isInCollection("division","Divisions") && 
            newDoc().timetype == "R" ) ||
          (isMissing("division") && 
            newDoc().timetype != "R" )
        ) &&

        // at least one hours type is provided OR the timetype is "OR" or "OTO"
        (
          ( 
            newDoc().timetype != "OR" && 
            newDoc().timetype != "OTO" && 
            !(newDoc().keys().hasAll(["payoutRequestAmount"])) && // payoutRequestAmount is not defined
            (
              (isPositiveNumberUnderEighteen("jobHours") && !(newDoc().timetype == "OR")) ||
              (isPositiveNumberUnderEighteen("hours") && !(newDoc().timetype == "OR")) ||
              (isPositiveNumberUnderEighteen("mealsHours") && !(newDoc().timetype == "OR")) 
            ) 
          ) ||
          (newDoc().timetype == "OR" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding"])) ||
          (newDoc().timetype == "OTO" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding", "payoutRequestAmount"]) && newDoc().payoutRequestAmount is number && newDoc().payoutRequestAmount > 0)
        ) &&

        // if timetype is "RB", only hours is provided and is a positive number
        (
          (isPositiveNumberUnderEighteen("hours") && newDoc().timetype == "RB" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding", "hours"])) ||
          newDoc().timetype != "RB"
        ) &&

        // when provided, jobHours require an existing job
        (
          ( isPositiveNumberUnderEighteen("jobHours") && isInCollection("job", "Jobs") ) ||
          isMissing("jobHours") 
        ) &&

        // when provided, mealsHours requires an existing job
        (
          ( isPositiveNumberUnderEighteen("mealsHours") && isInCollection("job", "Jobs") ) ||
          isMissing("mealsHours") 
        ) &&

        // when provided workrecord requires an existing job
        (
          ( hasValidWorkrecord() && isInCollection("job", "Jobs") ) ||
          isMissing("workrecord")
        );
    }
    match /Computers/{computer} {
      allow read: if hasClaim("admin");
    }
    match /Divisions/{division} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Logins/{login} {
      allow read: if hasClaim("admin");
    }
    match /Profiles/{profile} {
      allow read: if isSignedIn();
      // admins can update all profiles
      // users can update the managerUid and defaultDivision of their own profile
      allow update: if (
        hasClaim("admin") &&
        newDoc().keys().hasAll(["email", "displayName"]) &&
        newDoc().diff(resource.data).affectedKeys().hasOnly([
          "managerUid","displayName","email","customClaims", "defaultDivision"
        ]) &&
        isInCollection("managerUid","Profiles") && 
        // this restricts any updates that don't have a manager UID
        // NB: This technically allows any profile, regardless of permissions, to be assigned as a manager
        // The bundling function handles this by validating that the manager has tapr permissions
        isInCollection("defaultDivision", "Divisions")
        ) || (
          request.auth.uid == resource.id &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(["managerUid", "defaultDivision"]) &&
          isInCollection("managerUid","Profiles") && // tapr validated in buildTimesheets function
          isInCollection("defaultDivision", "Divisions")
        )
    }
    match /Jobs/{jobId} {
      allow read: if isSignedIn();
      allow create, update: if hasClaim("job") && 
        ( isMissing("proposal") || isInCollection("proposal","Jobs")) && 
        jobId.matches('(P)?[0-9]{2}-[0-9]{3,}(-[0-9]+)?') &&
        newDoc().keys().hasAll(["client", "description", "manager"]) &&
        newDoc().keys().hasOnly(["client", "description", "manager", "proposal", "status", "clientContact"]) &&
        newDoc().description.size() > 3;
    }
    match /RawLogins/{rawLogin} {
      allow read, delete: if hasClaim("admin");
    }
    match /TimeAmendments/{entry} {
      allow read: if hasClaim("tadm");
      allow delete: if hasClaim("tadm") && resource.data.committed == false;
      allow update: if 
        hasClaim("tadm") && 
        (
          (validAmendmentEntry() && resource.data.committed == false) ||
          (newDoc().diff(resource.data).affectedKeys().hasOnly(["committed", "commitTime", "commitName", "commitUid"]) && newDoc().committed == true && newDoc().commitUid == request.auth.uid )
        );
      allow create: if hasClaim("tadm") && validAmendmentEntry();
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches();
      allow create: if hasClaim("time") && validTimeEntry();
    }
    match /Expenses/{entry} {
      allow read: if (hasClaim("time") && uidMatches()) || hasClaim("tapr") || hasClaim("eapr");
      allow create: if 
        hasClaim("time") && validExpenseEntry() &&
        // prevent user from submitting an entry with an unauthorized uid
        request.auth.uid == request.resource.data['uid'];
      allow delete: if uidMatches() && resource.data.approved == false && resource.data.submitted == false && !resource.data.keys().hasAll(["committed"]);
      allow update: if 
        // owner can edit
        (hasClaim("time") && validExpenseEntry() && uidMatches()) ||
        // tapr can only approve or reject uncommitted expenses
        (hasClaim("tapr") && newDoc().diff(resource.data).affectedKeys().hasOnly(["approved", "rejected", "rejectionReason", "committed"]) && newDoc().committed == false) ||
        // eapr can only commit or reject uncommitted expenses
        (
          hasClaim("eapr") && 
          (
            ( newDoc().diff(resource.data).affectedKeys().hasOnly(["approved", "rejected", "rejectionReason"]) && newDoc().rejected == true && newDoc().approved == false ) ||
            ( newDoc().diff(resource.data).affectedKeys().hasOnly(["committed", "commitTime", "commitName", "commitUid"]) && newDoc().committed == true && newDoc().commitUid == request.auth.uid )
          )
        );
    }
    match /TimeTracking/{entry} {
      allow read: if hasClaim("tadm") || hasClaim("admin");
    }
    match /TimeSheets/{sheet} {
      allow read: if (
        hasClaim("time") && uidMatches() || 
        hasClaim("tapr") && managerUidMatches() && resource.data.submitted == true ||
        hasClaim("tsrej") && resource.data.approved == true ||
        hasClaim("tadm") && resource.data.approved == true ||
        hasClaim("admin") && resource.data.submitted == true
      );
      // Allow submission by directly editing the 'submitted' field
      // Prevent setting 'submitted' to false if already 'approved'
      // Allow rejection of submitted or approved timesheets by tapr
      // prevent rejection of locked timesheets by anybody
      allow update: if (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == true &&
        resource.data.rejected == false
      ) || (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == false &&
        resource.data.approved == false
      ) || (
        hasClaim("tapr") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["approved"]) &&
        request.resource.data.approved == true &&
        resource.data.rejected == false &&
        resource.data.submitted == true &&
        managerUidMatches()
      ) || (
        ((hasClaim("tapr") && managerUidMatches()) || hasClaim("tsrej")) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["approved", "rejected", "rejectionReason"]) &&
        request.resource.data.rejected == true &&
        request.resource.data.approved == false &&
        request.resource.data.rejectionReason.size() > 5 &&
        resource.data.submitted == true &&
        resource.data.locked == false
      );
    }
    match /TimeTypes/{timetype} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Users/{user} {
      allow read: if hasClaim("admin");
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}