service cloud.firestore {
  match /databases/{database}/documents {
    function hasClaim(claim) {
      // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() {
      // requester uid matches uid field in existing document
      return request.auth.uid == resource.data.uid;
    }
    function validTimeEntry() {
      return
        // Only the allowed fields are present
        request.resource.data.keys().hasOnly(
          [
            "date", "project", "division", "timetype", "hours", "workrecord", 
            "notes", "uid"
          ]
        ) &&

        // The Time Type is provided and exists in the database
        exists(/databases/$(database)/documents/TimeTypes/$(request.resource.data.timetype)) &&
 
        // When provided, Project exists in the database and Time Type is 'R'
        (
          (
            exists(/databases/$(database)/documents/Projects/$(request.resource.data.project)) &&
            request.resource.data.timetype == "R"
          ) || 
            !("project" in request.resource.data)
        ) &&

        // When provided, Division exists in the database and Time Type is 'R'
        (
          (
            exists(/databases/$(database)/documents/Divisions/$(request.resource.data.division)) &&
            request.resource.data.timetype == "R"
          ) || !("division" in request.resource.data)
        ) &&
        // jobHours is either a number or not provided (replace with numberOrMissing() func)
        ( request.resource.data.jobHours is number || !("jobHours" in request.resource.data) ) &&
        ( request.resource.data.nonJobHours is number || !("nonJobHours" in request.resource.data) ) &&
        ( request.resource.data.mealsHours is number || !("mealsHours" in request.resource.data) );
    }
    match /RawLogins/{rawLogin} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.rawlogins == true;
    }
    match /Logins/{login} {
      allow read: if request.auth.uid != null;
    }
    match /Profiles/{profile} {
      allow read: if request.auth.uid != null;
    }
    match /Users/{user} {
      allow read: if request.auth.uid != null;
    }
    match /Computers/{computer} {
      allow read: if request.auth.uid != null;
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches() 
      allow create: if hasClaim("time") && validTimeEntry()
    }
    match /TimeSheets/{sheet} {
      allow read, update, delete: if request.auth.uid == resource.data.uid && request.auth.token.time == true;
      allow create: if request.auth.token.time == true;
    }
    match /Projects/{project} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.projects == true;
    }
    match /Divisions/{division} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.admin == true;
    }
    match /TimeTypes/{timetype} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.token.admin == true;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}