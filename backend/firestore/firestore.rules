rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth.uid != null;
    }
    function hasClaim(claim) { // requester has given custom claim
      return request.auth.token[claim] == true;
    }
    function uidMatches() { // requester uid matches field in existing doc
      return request.auth.uid == resource.data.uid;
    }
    function uidUnchanged() { // uid field in existing doc matches request uid field
      return request.resource.data.uid == resource.data.uid;
    }
    function managerUidMatches() {
      return request.auth.uid == resource.data.managerUid;
    }
    function isViewer() {
      return request.auth.uid in resource.data.viewerIds;
    }
    function isInCollection(field, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(request.resource.data[field]))
    }
    function keyInCollection(key, collection) {
      return exists(/databases/$(database)/documents/$(collection)/$(key))
    }
    function isMissing(field) {
      return !(field in newDoc())
    }
    function newDoc() {
      return request.resource.data;
    }
    function valueOrZero(field) {
      return newDoc().get(field, 0)
    }
    function isPositiveMultipleOfPointFive(field) {
      return request.resource.data[field] is number && int(request.resource.data[field] * 2) == (request.resource.data[field] * 2) && request.resource.data[field] > 0;
    }
    function isPositiveMultipleOfPointFiveUnderEighteen(field) {
      return isPositiveMultipleOfPointFive(field) && request.resource.data[field] <= 18;
    }
    function hasValidWorkrecord() {
      return "workrecord" in newDoc() && newDoc().workrecord.matches('[FKQ][0-9]{2}-[0-9]{3,}(-[0-9]+)?');
    }
    function validAmendmentEntry() {
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "job", "payoutRequestAmount",
          "hours", "jobHours", "workrecord", "workDescription", "mealsHours", "uid",
          "timetypeName", "divisionName", "jobDescription", "client", "weekEnding",
          "creator", "creatorName", "displayName", "created", "committed", "surname", "givenName" ]) &&
        
        // timetype exists in db
        isInCollection("timetype","TimeTypes") &&

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "timetypeName", "uid",
        "creator", "creatorName", "displayName", "created", "surname", "givenName" ]) &&

        // when job provided, job & division exist in db,
        // jobDescription and client are present, timetype is 'R' or 'RT'
        (
          ( isInCollection("job","Jobs") && 
            isInCollection("division","Divisions") &&
            newDoc().keys().hasAll(["jobDescription", "client"]) &&
            get(/databases/$(database)/documents/Jobs/$(newDoc().job)).data.description == newDoc().jobDescription &&
            get(/databases/$(database)/documents/Jobs/$(newDoc().job)).data.client == newDoc().client &&
            (newDoc().timetype == "R" || newDoc().timetype == "RT") ) || 
          isMissing("job")
        ) &&

        // when provided, division exists in db, Time Type is 'R' or 'RT'
        // when division is missing, Time Type is not 'R' and is not 'RT'
        (
          ( isInCollection("division","Divisions") && 
            (newDoc().timetype == "R" || newDoc().timetype == "RT") ) ||
          (isMissing("division") && 
            (newDoc().timetype != "R" && newDoc().timetype != "RT") )
        ) &&

        // at least one hours type is provided AND the timetype is NOT "OW", "OR", "OTO", or "RB"
        (
          newDoc().timetype != "OW" &&
          newDoc().timetype != "OR" &&
          newDoc().timetype != "OTO" &&
          newDoc().timetype != "RB" &&
          !(newDoc().keys().hasAll(["payoutRequestAmount"])) && // payoutRequestAmount is not defined
          (
            newDoc().jobHours is number ||
            newDoc().hours is number ||
            newDoc().mealsHours is number 
          )
        ) &&

        // when provided, jobHours require an existing job
        (
          (newDoc().jobHours is number && isInCollection("job", "Jobs") ) ||
          isMissing("jobHours") 
        ) &&

        // when provided workrecord requires an existing job
        (
          ( hasValidWorkrecord() && isInCollection("job", "Jobs") ) ||
          isMissing("workrecord")
        );
    }
    function validExpenseEntry() {
      let newDoc = newDoc();
      return
        // allowed fields
        newDoc.keys().hasOnly([ "date", "description", "uid", "displayName", 
          "surname", "givenName", "total", "submitted", "approved",
          "managerUid", "managerName", "division", "divisionName", "paymentType",
          "unitNumber", "breakfast", "lunch", "dinner", "lodging",
          "vendorName", "distance", "ccLast4digits", "payrollId",
          "job", "jobDescription", "client", "po", "weekEnding", "attachment",
          "rejected", "rejectorId", "rejectorName", "rejectionReason", "committed" ]) &&
        
        // required fields
        newDoc.keys().hasAll(["date", "uid", "displayName",
          "surname", "givenName", "submitted", "approved", "payrollId",
          "managerUid", "managerName", "division", "divisionName", "paymentType"]) &&

        // description is present except for Allowance
        (
          newDoc.description.size() > 3 && !(newDoc.paymentType in ["Allowance", "FuelOnAccount"]) ||
          isMissing("description") && newDoc.paymentType in ["Allowance", "FuelOnAccount"]
        ) &&

        // payrollId matches that on the profile
        get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.payrollId == newDoc.payrollId &&

        // payrollId is not null
        newDoc.payrollId != null &&
        
        // the following list has "FuelOnAccount" removed to disable it
        newDoc.paymentType in ["Expense", "CorporateCreditCard", "Mileage", "FuelCard", "Allowance", "PersonalReimbursement"] &&
        isInCollection("division","Divisions") &&

        // requires valid ccLast4digits if paymentType is "CorporateCreditCard" or "FuelCard"
        (
          newDoc.paymentType in ["CorporateCreditCard","FuelCard"] && newDoc().ccLast4digits.matches('[0-9]{4}') ||
          !(newDoc.paymentType in ["CorporateCreditCard","FuelCard"]) && isMissing("ccLast4digits")
        ) &&

        // requires vendorName if paymentType is "Expense", "FuelCard", "FuelOnAccount", "CorporateCreditCard"
        (
          newDoc.paymentType in ["Expense", "FuelCard", "FuelOnAccount", "CorporateCreditCard"] && !isMissing("vendorName") ||
          !(newDoc.paymentType in ["Expense", "FuelCard", "FuelOnAccount", "CorporateCreditCard"])
        ) &&

        // requires attachment if paymentType is "CorporateCreditCard", "FuelCard" or "Expense"
        (
          newDoc.paymentType in ["CorporateCreditCard", "FuelCard", "Expense"] && !isMissing("attachment") ||
          !(newDoc.paymentType in ["CorporateCreditCard", "FuelCard", "Expense"])
        ) &&
        // po must be missing if paymentType is FuelCard or FuelOnAccount
        (
          newDoc.paymentType in ["FuelCard", "FuelOnAccount"] && isMissing("po") ||
          !(newDoc.paymentType in ["FuelCard", "FuelOnAccount"])
        ) &&

        // unitNumber must only be present for FuelOnAccount, and must be a positive integer
        (
          (newDoc.unitNumber is int && newDoc().unitNumber > 0 && newDoc.paymentType == "FuelOnAccount") ||
          newDoc.paymentType != "FuelOnAccount" && isMissing("unitNumber")
        ) &&
        // when paymentType is not Mileage or Allowance, total is positive number and distance is missing
        // when paymentType is Mileage, distance is positive integer & po, vendorName, attachment, total are missing
        // when paymentType is Allowance, breakfast, lunch, dinner and lodging are booleans and total and distance are missing
        // when paymentType is Allowance, at least one of breakfast, lunch, dinner and lodging must be true
        // when paymentType is PersonalReimbursement, po, vendorName, attachment, breakfast, lunch, dinner, lodging are missing
        (
          (
            !(newDoc.paymentType in ["Mileage", "Allowance", "PersonalReimbursement"]) &&
            newDoc.total is number &&
            newDoc.total > 0 &&
            isMissing("distance")
          ) ||
          (
            newDoc.paymentType == "Mileage" &&
            newDoc.distance is int &&
            newDoc.distance > 0 &&
            isMissing("po") &&
            isMissing("vendorName") &&
            isMissing("attachment") &&
            isMissing("total") && 
            get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.personalVehicleInsuranceExpiry >= newDoc.date
          ) ||
          (
            newDoc.paymentType == "Allowance" &&
            isMissing("po") &&
            isMissing("total") &&
            isMissing("distance") &&
            newDoc.breakfast is bool &&
            newDoc.lunch is bool &&
            newDoc.dinner is bool &&
            newDoc.lodging is bool &&
            ( newDoc.breakfast || newDoc.lunch || newDoc.dinner || newDoc.lodging )
          ) ||
          (
            newDoc.paymentType == "PersonalReimbursement" &&
            newDoc.total is number &&
            newDoc.total > 0 &&
            isMissing("breakfast") &&
            isMissing("lunch") &&
            isMissing("dinner") &&
            isMissing("lodging") &&
            isMissing("vendorName") &&
            isMissing("ccLast4digits") &&
            isMissing("unitNumber") &&
            isMissing("attachment") &&
            isMissing("distance") &&
            isMissing("po") &&
            get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.allowPersonalReimbursement
          )
        ) &&

        // when job provided, job exists in db,
        // jobDescription and client are present
        (
          ( isInCollection("job","Jobs") && 
            newDoc.keys().hasAll(["jobDescription", "client"]) &&
            get(/databases/$(database)/documents/Jobs/$(newDoc.job)).data.description == newDoc.jobDescription &&
            get(/databases/$(database)/documents/Jobs/$(newDoc.job)).data.client == newDoc.client
          ) || 
          isMissing("job")
        )
        // TODO: check length of description matches UI restriction and validate
        // other properties
    }
    function validTimeEntry() {
      // TODO: Boolean Simplification
      return
        // allowed fields
        newDoc().keys().hasOnly([ "date", "timetype", "division", "job", "payoutRequestAmount",
          "hours", "jobHours", "workrecord", "workDescription", "mealsHours", "uid",
          "timetypeName", "divisionName", "jobDescription", "client", "weekEnding" ]) &&

        // timetype exists in db
        isInCollection("timetype","TimeTypes") &&

        // required fields
        newDoc().keys().hasAll(["date", "timetype", "timetypeName", "uid"]) &&

        // verify date is actually a timestamp
        newDoc().date is timestamp &&

        // prevent user from submitting an entry with an unauthorized uid
        request.auth.uid == request.resource.data['uid'] &&

        // prevent salaried staff from submitting an RB entry
        (
          get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.salary == false ||
          ( get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.salary == true && newDoc().timetype != "RB" )
        ) &&

        // when job provided, job & division exist in db,
        // jobDescription and client are present, timetype is 'R' or 'RT'
        // hours field is missing
        (
          ( isInCollection("job","Jobs") && 
            isInCollection("division","Divisions") &&
            newDoc().keys().hasAll(["jobDescription", "client"]) &&
            get(/databases/$(database)/documents/Jobs/$(newDoc().job)).data.description == newDoc().jobDescription &&
            get(/databases/$(database)/documents/Jobs/$(newDoc().job)).data.client == newDoc().client &&
            (newDoc().timetype == "R" || newDoc().timetype == "RT") &&
            isMissing("hours")
          ) || 
          isMissing("job")
        ) &&

        // when provided, division exists in db, Time Type is 'R' or 'RT'
        // when division is missing, Time Type is not 'R' and is not 'RT'
        (
          ( isInCollection("division","Divisions") && 
            (newDoc().timetype == "R" || newDoc().timetype == "RT") ) ||
          (isMissing("division") && 
            (newDoc().timetype != "R" && newDoc().timetype != "RT") )
        ) &&

        // at least one hours type is provided OR the timetype is "OR", "OW" or "OTO" or "RB"
        (
          ( 
            newDoc().timetype != "OW" && 
            newDoc().timetype != "OR" && 
            newDoc().timetype != "RB" && 
            newDoc().timetype != "OTO" && 
            !(newDoc().keys().hasAll(["payoutRequestAmount"])) && // payoutRequestAmount is not defined
            (
              (isPositiveMultipleOfPointFiveUnderEighteen("jobHours") && !(newDoc().timetype in ["OR", "OW"])) ||
              (isPositiveMultipleOfPointFiveUnderEighteen("hours") && !(newDoc().timetype in ["OR", "OW"])) ||
              (isPositiveMultipleOfPointFiveUnderEighteen("mealsHours") && !(newDoc().timetype in ["OR", "OW"]))
            ) 
          ) ||
          (newDoc().timetype in ["OR", "OW"] && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding"])) ||
          (newDoc().timetype == "OTO" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding", "payoutRequestAmount"]) && newDoc().payoutRequestAmount is number && newDoc().payoutRequestAmount > 0) ||
          (newDoc().timetype == "RB" && isPositiveMultipleOfPointFive("hours"))
        ) &&

        // validate presence and length of description for Regular Hours and Training
        (
          (newDoc().workDescription.size() > 4 && newDoc().timetype in ["R", "RT"]) || !(newDoc().timetype in ["R", "RT"])
        ) &&

        // ensure absence of description for Banking, Payout, Off and Off Rotation
        (
          ( isMissing("workDescription") && newDoc().timetype in ["RB", "OTO", "OR", "OW"]) || !(newDoc().timetype in ["RB", "OTO", "OW", "OR"])
        ) &&

        // if timetype is "RB", only hours is provided and is a positive number
        (
          (isPositiveMultipleOfPointFive("hours") && newDoc().timetype == "RB" && newDoc().keys().hasOnly(["date", "timetype", "timetypeName", "uid", "weekEnding", "hours"])) ||
          newDoc().timetype != "RB"
        ) &&

        // when provided, jobHours require an existing job
        (
          ( isPositiveMultipleOfPointFiveUnderEighteen("jobHours") && isInCollection("job", "Jobs") ) ||
          isMissing("jobHours") 
        ) &&

        // when provided, mealsHours requires either jobHours or hours to be present
        (
          ( 
            isPositiveMultipleOfPointFiveUnderEighteen("mealsHours") &&
            (isPositiveMultipleOfPointFiveUnderEighteen("hours") || isPositiveMultipleOfPointFiveUnderEighteen("jobHours"))
          ) ||
          isMissing("mealsHours") 
        ) &&

        // The total of jobHours and mealsHours and hours doesn't exceed 18 unless timetype is RB
        (
          newDoc().timetype != "RB" &&
          valueOrZero("mealsHours") + valueOrZero("jobHours") + valueOrZero("hours") <= 18 ||
          newDoc().timetype == "RB"
        ) &&
        // when provided workrecord requires an existing job
        (
          ( hasValidWorkrecord() && isInCollection("job", "Jobs") ) ||
          isMissing("workrecord")
        );
    }
    function validProfile() {
      return
        newDoc().keys().hasAll(["email", "displayName", "payrollId", "salary"]) &&
        newDoc().diff(resource.data).affectedKeys().hasOnly([
          "bot", "managerUid", "alternateManager", "displayName","email","customClaims", "allowPersonalReimbursement", "skipMinTimeCheckOnNextBundle", "doNotAcceptSubmissions", "defaultDivision", "payrollId", "salary", "personalVehicleInsuranceExpiry", "timeSheetExpected", "offRotation", "untrackedTimeOff", "workWeekHours"
        ]) &&
        (
          (newDoc().bot is string && newDoc().bot.size() > 2) || isMissing("bot")
        ) &&
        (
          newDoc().offRotation is bool || isMissing("offRotation")
        ) &&
        (
          newDoc().workWeekHours is int && 
          newDoc().workWeekHours > 0 &&
          newDoc().workWeekHours <= 40 || 
          isMissing("workWeekHours")
        ) &&
        (
          (newDoc().payrollId is int &&
          newDoc().payrollId > 0) ||
          (newDoc().payrollId is string &&
          newDoc().payrollId.matches('CMS[0-9]{1,2}'))
        ) &&
        (
          newDoc().personalVehicleInsuranceExpiry is timestamp || isMissing("personalVehicleInsuranceExpiry")
        ) &&
        (
          (
            newDoc().skipMinTimeCheckOnNextBundle is bool &&
            (
              newDoc().skipMinTimeCheckOnNextBundle == newDoc().salary || newDoc().skipMinTimeCheckOnNextBundle != true
            ) &&
            (
              newDoc().skipMinTimeCheckOnNextBundle == false || (newDoc().untrackedTimeOff == false || isMissing("untrackedTimeOff"))
            )
          ) || isMissing("skipMinTimeCheckOnNextBundle")
        ) &&
        (
          newDoc().allowPersonalReimbursement is bool || isMissing("allowPersonalReimbursement")
        ) &&
        (
          (
            newDoc().untrackedTimeOff is bool && 
            (
              newDoc().untrackedTimeOff == newDoc().salary || newDoc().untrackedTimeOff != true
            ) 
          ) || isMissing("untrackedTimeOff")
        ) &&
        (
          newDoc().doNotAcceptSubmissions is bool || isMissing("doNotAcceptSubmissions")
        ) &&
        newDoc().salary is bool &&
        newDoc().timeSheetExpected is bool &&
        isInCollection("managerUid","Profiles") && 
        // this restricts any updates that don't have a manager UID
        // NB: This technically allows any profile, regardless of permissions, to be assigned as a manager
        // The bundling function handles this by validating that the manager has tapr permissions
        isInCollection("defaultDivision", "Divisions") &&
        (
          isInCollection("alternateManager", "ManagerNames") ||
          isMissing("alternateManager") 
        )      
    }
    function containsNoDuplicates(array) {
      return array.toSet().size() == array.size();
    }
    function isDivisionNotGroup(div) {
      // verify that the division has a length of at least 2 characters since
      // groups have a length of 1
      return div.size() > 1 && keyInCollection(div, "Divisions");
    }
    function validDivisionsArray(value) {
      // the divisions array 
      // 1. must have at least one element 
      // 2. each element must be a string representing the id of a division in
      //    the Divisions collection
      // 3. each element must be at least 2 characters long because
      //    single-character divisions are actually Groups
      // 4. each element must be unique
      return (
        value is list &&
        value.size() > 0 &&
        value.size() < 10 &&

        // the first element must be a division
        isDivisionNotGroup(value[0]) &&

        // the length must be less than 2 or the second element must be a division
        // no more than 9 elements are allowed for the divisions list.
        (value.size() < 2 || isDivisionNotGroup(value[1])) &&
        (value.size() < 3 || isDivisionNotGroup(value[2])) &&
        (value.size() < 4 || isDivisionNotGroup(value[3])) &&
        (value.size() < 5 || isDivisionNotGroup(value[4])) &&
        (value.size() < 6 || isDivisionNotGroup(value[5])) &&
        (value.size() < 7 || isDivisionNotGroup(value[6])) &&
        (value.size() < 8 || isDivisionNotGroup(value[7])) &&
        (value.size() < 9 || isDivisionNotGroup(value[8])) &&
        (value.size() < 10 || isDivisionNotGroup(value[9])) &&
        containsNoDuplicates(value)
      );
    }
    function validJob(jobId) {
      return (
        jobId.matches('(P)?[0-9]{2}-[0-9]{3,4}(-[0-9]{1,2})?(-[0-9])?') &&
        newDoc().keys().hasAll([ "client", "clientContact", "description", "managerUid", "managerDisplayName", "status", "divisions", "jobOwner", "fnAgreement"]) &&
        newDoc().keys().hasOnly(["client", "clientContact", "description", "managerUid", "managerDisplayName", "status", "divisions", "jobOwner", "fnAgreement", "alternateManagerUid", "alternateManagerDisplayName", "lastTimeEntryDate", "hasTimeEntries", "proposal", "proposalOpeningDate", "proposalSubmissionDueDate", "projectAwardDate"]) &&
        isInCollection("managerUid","Profiles") &&
        (
          (isInCollection("alternateManagerUid","Profiles") && newDoc().managerUid != newDoc().alternateManagerUid) || 
          isMissing("alternateManagerUid")
        ) &&
        newDoc().description.size() > 3 &&
        newDoc().status is string &&
        newDoc().fnAgreement is bool &&
        validDivisionsArray(newDoc().divisions) &&

        // the jobOwner must be a string 
        // 1. jobOwner is the name of the party that actually owns the job, as
        //    the client may be a subcontractor
        // 2. jobOwner matches client if the client is the actual owner of the
        //    job
        newDoc().jobOwner is string && newDoc().jobOwner.size() > 5 &&

        // clientContact must be a string
        newDoc().clientContact is string && newDoc().clientContact.size() > 5 &&

        // validate properties that are only present on either proposals or projects
        (
          ( jobId.matches('^(P).*') && 
            // the proposals branch
            (
              isMissing("proposal") &&
              newDoc().proposalOpeningDate is timestamp &&
              newDoc().proposalSubmissionDueDate is timestamp &&
              isMissing("projectAwardDate") &&
              (newDoc().status == "Active" || newDoc().status == "Awarded" || newDoc().status == "Not Awarded" || newDoc().status == "Cancelled" )
            )
          ) ||
          ( jobId.matches('^[0-9].*') &&
            // the projects branch
            (
              (isMissing("proposal") || ( isInCollection("proposal","Jobs") && newDoc().proposal.matches('^(P).*')) ) &&
              isMissing("proposalOpeningDate") &&
              isMissing("proposalSubmissionDueDate") &&
              newDoc().projectAwardDate is timestamp &&
              (newDoc().status =="Active" || newDoc().status =="Closed" || newDoc().status =="Cancelled" )
            )
          )
        )
      );
    }
    match /Computers/{computer} {
      allow read: if hasClaim("admin") || hasClaim("computers");
    }
    match /ProfileSecrets/{profileId} {
      allow read: if request.auth.uid == profileId;
    }
    match /AIChats/{chatId} {
      allow read: if uidMatches();
      allow update: if (
        uidMatches() &&
        newDoc().diff(resource.data).affectedKeys().hasOnly(["last_updated", "count", "waiting"]) &&
        request.resource.data.last_updated is timestamp &&
        request.resource.data.count is number &&
        request.resource.data.waiting is bool
      );
    }
    match /AIChats/{chatId}/messages/{messageId} {
      allow read: if request.auth.uid == get(/databases/$(database)/documents/AIChats/$(chatId)).data.uid;
      allow create: if (
        request.auth.uid == get(/databases/$(database)/documents/AIChats/$(chatId)).data.uid && 
        request.resource.data.keys().hasOnly(["content", "role", "time"]) && 
        request.resource.data.content is string && request.resource.data.content.size() > 0 &&
        request.resource.data.role is string && request.resource.data.role == "user" &&
        request.resource.data.time is timestamp
      );
    }
    match /ManagerNames/{profileId} {
      allow read: if hasClaim("time");
    }
    match /Divisions/{division} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /Logins/{login} {
      allow read: if hasClaim("admin");
    }
    match /Profiles/{profileId} {
      allow read: if request.auth.uid == profileId || hasClaim("tapr") && managerUidMatches() || hasClaim("report") || hasClaim("admin");
      // admins can update all profiles
      // users can update the managerUid and defaultDivision of their own profile
      allow update: if (
        hasClaim("admin") && validProfile()
      ) ||
      // hr can only update certain fields
      (
        hasClaim("hr") && validProfile() && newDoc().diff(resource.data).affectedKeys().hasOnly(["managerUid", "allowPersonalReimbursement", "skipMinTimeCheckOnNextBundle", "defaultDivision", "payrollId", "salary", "personalVehicleInsuranceExpiry", "timeSheetExpected", "offRotation" ])
      ) ||
      (
        request.auth.uid == resource.id &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["managerUid", "alternateManager", "defaultDivision", "doNotAcceptSubmissions"]) &&
        isInCollection("managerUid","Profiles") && // tapr validated in buildTimesheets function
        isInCollection("defaultDivision", "Divisions") &&
        (
          newDoc().doNotAcceptSubmissions is bool || isMissing("doNotAcceptSubmissions")
        ) &&
        (
          isInCollection("alternateManager", "ManagerNames") ||
          isMissing("alternateManager") 
        )
      )
    }
    match /Jobs/{jobId} {
      allow read: if isSignedIn();
      allow create: if hasClaim("job") && validJob(jobId) &&
        // ensure user doesn't set some fields
        newDoc().hasTimeEntries == false &&
        isMissing("lastTimeEntryDate");
      allow update: if hasClaim("job") && (
        validJob(jobId) &&
        // ensure user doesn't change some fields
        !newDoc().diff(resource.data).affectedKeys().hasAny(["lastTimeEntryDate", "hasTimeEntries"])
      ) || 
      (
        newDoc().diff(resource.data).affectedKeys().hasOnly(["status"]) && 
        (
          (
            newDoc().status in ["Cancelled", "Closed"] &&
            jobId.matches('^[0-9].*')
          ) || 
          (
            newDoc().status == "Cancelled" &&
            jobId.matches('^(P).*')
          )
        )
      );
    }
    match /RawLogins/{rawLogin} {
      allow read, delete: if hasClaim("admin");
    }
    match /TimeAmendments/{entry} {
      allow read: if hasClaim("tame");
      allow delete: if hasClaim("tame") && resource.data.committed == false;
      allow update: if hasClaim("tame") && validAmendmentEntry() && resource.data.committed == false;
      allow create: if hasClaim("tame") && validAmendmentEntry();
    }
    match /TimeEntries/{entry} {
      allow read, delete: if hasClaim("time") && uidMatches();
      allow update: if hasClaim("time") && validTimeEntry() && uidMatches() && uidUnchanged();
      allow create: if hasClaim("time") && validTimeEntry();
    }
    match /Expenses/{entry} {
      allow read: if (
        hasClaim("time") && uidMatches() ||
        hasClaim("tapr") && managerUidMatches() && resource.data.submitted == true ||
        hasClaim("eapr") && (resource.data.approved == true || resource.data.committed == true) ||
        hasClaim("report") && (resource.data.submitted == true || resource.data.approved == true || resource.data.committed == true)
      )
      allow create: if 
        hasClaim("time") && validExpenseEntry() && newDoc().submitted == false && newDoc().approved == false && isMissing("committed") &&
        // prevent user from creating an entry for somebody else
        request.auth.uid == request.resource.data['uid'];
      allow delete: if uidMatches() && resource.data.approved == false && resource.data.submitted == false;
      allow update: if 
        // owner can edit
        (hasClaim("time") && validExpenseEntry() && uidMatches() && uidUnchanged() && resource.data.approved == false && isMissing("rejected") && isMissing("rejectionReason") && (newDoc().committed == false || isMissing("committed")) && newDoc().approved == false) ||
        // owner can recall unapproved
        (hasClaim("time") && validExpenseEntry() && uidMatches() && uidUnchanged() && resource.data.approved == false && newDoc().diff(resource.data).affectedKeys().hasOnly(["submitted"]) && newDoc().submitted == false) ||
        // tapr can approve submitted expenses if they are manager
        (hasClaim("tapr") && managerUidMatches() && newDoc().diff(resource.data).affectedKeys().hasOnly(["approved", "committed"]) && newDoc().committed == false && newDoc().approved == true && resource.data.submitted == true) ||
        // tapr can submit and simultaneously approve expenses if they are their own manager
        (hasClaim("tapr") && managerUidMatches() && newDoc().diff(resource.data).affectedKeys().hasOnly(["submitted", "approved", "committed"]) && newDoc().submitted == true && newDoc().approved == true && newDoc().committed == false) ||
        // tapr can reject submitted uncommitted expenses they manage
        (
          (
            hasClaim("tapr") && managerUidMatches()
          ) && 
          newDoc().diff(resource.data).affectedKeys().hasOnly(["submitted", "approved", "rejected", "rejectorId", "rejectorName", "rejectionReason"]) &&
          (newDoc().committed == false || isMissing("committed")) &&
          newDoc().submitted == false &&
          newDoc().approved == false &&
          resource.data.submitted == true &&
          newDoc().rejected == true &&
          newDoc().rejectorId == request.auth.uid &&
          get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.displayName == newDoc().rejectorName
        ) ||
        // eapr can only commit or reject approved expenses
        (
          hasClaim("eapr") && 
          (
            (
              newDoc().diff(resource.data).affectedKeys().hasOnly(["submitted", "approved", "rejected", "rejectorId", "rejectorName", "rejectionReason"]) &&
              newDoc().rejected == true &&
              newDoc().approved == false &&
              resource.data.approved == true &&
              newDoc().submitted == false &&
              resource.data.submitted == true &&
              newDoc().rejectorId == request.auth.uid &&
              get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.displayName == newDoc().rejectorName
            ) ||
            (
              newDoc().diff(resource.data).affectedKeys().hasOnly(["committed", "commitTime", "commitName", "commitUid", "exported"]) &&
              newDoc().exported == false &&
              newDoc().committed == true &&
              newDoc().commitUid == request.auth.uid &&
              resource.data.approved == true &&
              resource.data.date < request.time &&
              (resource.data.rejected == false || !("rejected" in resource.data))
            )
          )
        );
    }
    match /PayrollTracking/{entry} {
      allow read: if hasClaim("report") || hasClaim("admin");
    }
    match /TimeTracking/{entry} {
      allow read: if hasClaim("report") || hasClaim("admin");
      allow update: if (
        hasClaim("report") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["notMissingUids"]) &&
        newDoc().notMissingUids.size() < 11 &&
        (newDoc().notMissingUids.size() < 1 || keyInCollection(newDoc().notMissingUids[0],"Profiles")) &&
        (newDoc().notMissingUids.size() < 2 || keyInCollection(newDoc().notMissingUids[1],"Profiles")) &&
        (newDoc().notMissingUids.size() < 3 || keyInCollection(newDoc().notMissingUids[2],"Profiles")) &&
        (newDoc().notMissingUids.size() < 4 || keyInCollection(newDoc().notMissingUids[3],"Profiles")) &&
        (newDoc().notMissingUids.size() < 5 || keyInCollection(newDoc().notMissingUids[4],"Profiles")) &&
        (newDoc().notMissingUids.size() < 6 || keyInCollection(newDoc().notMissingUids[5],"Profiles")) &&
        (newDoc().notMissingUids.size() < 7 || keyInCollection(newDoc().notMissingUids[6],"Profiles")) &&
        (newDoc().notMissingUids.size() < 8 || keyInCollection(newDoc().notMissingUids[7],"Profiles")) &&
        (newDoc().notMissingUids.size() < 9 || keyInCollection(newDoc().notMissingUids[8],"Profiles")) &&
        (newDoc().notMissingUids.size() < 10 || keyInCollection(newDoc().notMissingUids[9],"Profiles"))
      );
    }
    match /ExpenseTracking/{entry} {
      allow read: if hasClaim("report") || hasClaim("admin");
    }
    match /TimeSheets/{sheet} {
      allow read: if (
        hasClaim("time") && uidMatches() || 
        hasClaim("tapr") && (managerUidMatches() || isViewer()) && resource.data.submitted == true ||
        hasClaim("tsrej") && resource.data.approved == true ||
        hasClaim("tame") && resource.data.approved == true ||
        hasClaim("admin") && resource.data.submitted == true ||
        hasClaim("report") && resource.data.locked == true
      );
      // Allow submission by directly editing the 'submitted' field
      // Prevent setting 'submitted' to false if already 'approved'
      // Allow rejection of submitted or approved timesheets by tapr
      // prevent rejection of locked timesheets by anybody
      allow update: if (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == true &&
        resource.data.rejected == false
      ) || (
        hasClaim("time") && 
        uidMatches() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["submitted"]) &&
        request.resource.data.submitted == false &&
        resource.data.approved == false
      ) || (
        hasClaim("tapr") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["approved"]) &&
        request.resource.data.approved == true &&
        resource.data.rejected == false &&
        resource.data.submitted == true &&
        managerUidMatches()
      ) || (
        hasClaim("tapr") &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["viewerIds"]) &&
        resource.data.submitted == true &&
        (resource.data.locked == false || isMissing("locked")) &&
        managerUidMatches() &&
        newDoc().viewerIds.size() < 5 &&
        (newDoc().viewerIds.size() < 1 || keyInCollection(newDoc().viewerIds[0],"ManagerNames")) &&
        (newDoc().viewerIds.size() < 2 || keyInCollection(newDoc().viewerIds[1],"ManagerNames")) &&
        (newDoc().viewerIds.size() < 3 || keyInCollection(newDoc().viewerIds[2],"ManagerNames")) &&
        (newDoc().viewerIds.size() < 4 || keyInCollection(newDoc().viewerIds[3],"ManagerNames"))
      ) || (
        hasClaim("tapr") &&
        isViewer() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["reviewedIds"]) &&
        resource.data.submitted == true &&
        (resource.data.locked == false || isMissing("locked")) &&
        (
          newDoc().reviewedIds.size() == 1 ||
          newDoc().reviewedIds.size() - resource.data.reviewedIds.size() == 1
        ) &&
        request.auth.uid in newDoc().reviewedIds &&
        (
          !("reviewedIds" in resource.data) ||
          !(request.auth.uid in resource.data.reviewedIds)
        )
      ) || (
        ((hasClaim("tapr") && managerUidMatches()) || hasClaim("tsrej")) &&
        newDoc().diff(resource.data).affectedKeys().hasOnly(["submitted", "approved", "rejected", "rejectorId", "rejectorName", "rejectionReason"]) &&
        newDoc().rejected == true &&
        newDoc().approved == false &&
        newDoc().submitted == false &&
        newDoc().rejectionReason.size() > 5 &&
        resource.data.submitted == true &&
        resource.data.locked == false &&
        newDoc().rejectorId == request.auth.uid &&
        get(/databases/$(database)/documents/Profiles/$(request.auth.uid)).data.displayName == newDoc().rejectorName
      );
    }
    match /TimeTypes/{timetype} {
      allow read: if isSignedIn();
      allow write: if hasClaim("admin");
    }
    match /UserMutations/{mutation} {
      allow read: if hasClaim("admin") || hasClaim("hr");
    }
    match /Users/{user} {
      allow read: if hasClaim("admin") || hasClaim("hr");
    }
    match /WireGuardClients/{client} {
      allow read: if hasClaim("admin") || hasClaim("hr") || uidMatches();
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}